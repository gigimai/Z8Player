//
//  ZPDetailViewController.m
//  Z8Player
//
//  Created by HieuSE on 8/15/14.
//  Copyright (c) 2014 FSOFT. All rights reserved.
//

#import "ZPDetailViewController.h"
#import "UISlider+FlatUI.h"
@interface ZPDetailViewController (){
    BOOL isPlaying;
    NSTimer* sliderTimer;
    NSString *urlLink;
    NSInteger linkType ;
}
@property (strong, nonatomic) IBOutlet UIView *playerView;
@property (weak, nonatomic) IBOutlet UIActivityIndicatorView *activityIndicator;
@property (strong, nonatomic) IBOutlet UIScrollView *infoView;
@property (strong, nonatomic) IBOutlet UILabel *titleLabel;
@property (strong, nonatomic) IBOutlet UIButton *shareFBBtn;
@property (strong, nonatomic) IBOutlet UIButton *shareTwitterBtn;

@property (strong, nonatomic) IBOutlet UIView *playerControlView;
@property (strong, nonatomic) IBOutlet UIButton *playButton;
@property (strong, nonatomic) IBOutlet UISlider *playSlider;
@property (nonatomic) size_t videoDuration;
@end

@implementation ZPDetailViewController
@synthesize urlLink;
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil withURLString:(NSString *)linkStr
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        urlLink = [NSString stringWithFormat:@"%@",linkStr];
        
    }
    return self;
}



- (void)viewDidLoad
{
    [super viewDidLoad];
    
    //urlLink = @"rtmp://cp79650.live.edgefcs.net/live/QVCLive1@14308";
   // urlLink = @"http://85.132.44.99:1935/turktv/startv.sdp/embedstv39.m3u8";
   // urlLink =@"http://scache.fptplay.net.vn/live/htv2_500.stream/playlist.m3u8";

    // Do any additional setup after loading the view from its nib.
    self.mediaplayer = [[MediaPlayer alloc] initWithURL:urlLink];

    
    [self setupView];
    [self.playButton setImage:[UIImage imageNamed:@"pause.png"] forState:UIControlStateNormal];
    
    isPlaying = YES;
 
    
  //  self.optionIndices = [NSMutableIndexSet indexSetWithIndex:3];

    
}

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    //urlLink =@"http://videohcm114.fptplay.net.vn/mp4//OTT/Ca_Nhac/Nhac_Viet_Nam/NhacVietNam_Da_Quen_That_Sao_Liveshow_New_Hits_Ngoc_Tram.mp4";
    //NSString *urlLink = @"rtmp://10.88.107.5/vod/mp4:Cars.2.Air.Mater";
    //@"rtmp://10.88.107.5/vod/mp4:Cars.2.Air.Mater";
    // self.mediaplayer = [[MediaPlayer alloc] initWithURL:urlLink];
    NSLog(@"Link:%@",urlLink);
    [self.mediaplayer.managerUtility loadingPlayer:self.playerView viewController:self urlLink:urlLink];
    [self.activityIndicator startAnimating];
    [self.mediaplayer.managerUtility playWithURL:urlLink];
    [self.playSlider setValue:0.0f];
    linkType = [self.mediaplayer checkLink:urlLink];
    [urlLink rangeOfString:@"m3u8"];
    if ((linkType == kHTTP_LINK) &&
        (([urlLink rangeOfString:@"m3u8"].location == NSNotFound))){
    [self setSlider];
    
    }
    else
    {
        self.playSlider.userInteractionEnabled = NO;
    }
}

-(void)setupView
{
//    [self.segmentCtrl setSelectedFont:[UIFont boldFlatFontOfSize:16]];
//    [self.segmentCtrl setSelectedFontColor:[UIColor cloudsColor]];
//    [self.segmentCtrl setDeselectedFont:[UIFont flatFontOfSize:16]];
//    [self.segmentCtrl setDeselectedFontColor:[UIColor cloudsColor]];
//    [self.segmentCtrl setSelectedColor:[UIColor turquoiseColor]];
//    [self.segmentCtrl setDeselectedColor:[UIColor greenSeaColor]];
//    [self.segmentCtrl setDisabledColor:[UIColor silverColor]];
//    [self.segmentCtrl setDividerColor:[UIColor silverColor]];
//    [self.segmentCtrl setCornerRadius:5.0];
    [self.playerControlView setBackgroundColor:[UIColor lightTextColor]];
    [_infoView setBackgroundColor:[UIColor lightTextColor]];
    UIView *verticalDivider = [[UIView alloc]initWithFrame:CGRectMake(_playButton.frame.size.width, 2.5, 1, _playButton.frame.size.height - 5)];
    [verticalDivider setBackgroundColor:[UIColor grayColor]];
    [_playButton addSubview:verticalDivider];

    [_titleLabel setText:_movieTitle];
  
//    UIView *lowerHorizontalDivider = [[UIView alloc]initWithFrame:CGRectMake(0, _playerControlView.frame.size.height, 320, 1)];
//    [lowerHorizontalDivider setBackgroundColor:[UIColor grayColor]];
//    [_playerControlView addSubview:lowerHorizontalDivider];
//    UIView *upperHorizontalDivider = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 320, 1)];
//    [upperHorizontalDivider setBackgroundColor:[UIColor whiteColor]];
//    [_playerControlView addSubview:upperHorizontalDivider];
  
}

-(void)dismissCurrentView
{
    [self.mediaplayer.managerUtility stop];
    [self dismissViewControllerAnimated:YES completion:nil];
    
}
-(void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    NSLog(@"Exit");
    [self.mediaplayer.managerUtility stop];
    [self.activityIndicator stopAnimating];
    [sliderTimer invalidate];
    
}

-(void)removeAllSubViewFrom:(UIView *)superView
{
    for (UIView *view in superView.subviews) {
        [view removeFromSuperview];
    }
}
- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}




#pragma mark Implementation Delegate of RTMP player

-(void)openOk{
    NSLog(@"Open ok");
    
    
}
-(void)openFailed{
    NSLog(@"Open failed");
}

-(void)readyToPlay{
    NSLog(@"ready to play");
    [self.activityIndicator stopAnimating];
    [self.playButton setImage:[UIImage imageNamed:@"pause.png"] forState:UIControlStateNormal];
    isPlaying = YES;

}

-(void)bufferingStart{
    NSLog(@"buffering start");
    [self.view bringSubviewToFront:self.activityIndicator];
    [self.activityIndicator startAnimating];
    
}

-(void)mediaDuration:(size_t)duration{
    NSLog(@"Duration of film : %zd", duration);
    self.videoDuration = duration;
}

- (void)mediaPosition:(size_t)position{
    NSLog(@"position: %zd", position);
    Float32 percent_status = ((Float32)position/self.videoDuration);
    NSLog(@"time: %f", percent_status);
    [self.playSlider setValue:percent_status];
}

- (IBAction)playOrPause:(id)sender {
    if (isPlaying) {
        [self.playButton setImage:[UIImage imageNamed:@"play.png"] forState:UIControlStateNormal];
        isPlaying = NO;
        [self.mediaplayer.managerUtility pause];
    }else{
        [self.playButton setImage:[UIImage imageNamed:@"pause.png"] forState:UIControlStateNormal];
        isPlaying = YES;
        [self.mediaplayer.managerUtility resume];
    }
}

#pragma mark Implement Slider for HTTP

-(IBAction)sliding:(id)sender{
    
    [self.mediaplayer.managerUtility pause];
    CMTime newTime = CMTimeMakeWithSeconds(self.playSlider.value, 1);
    [self.mediaplayer.managerUtility seekToPos:0 seekTime:newTime];
    [self.mediaplayer.managerUtility playWithURL:urlLink];
}

-(void)setSlider{
    
    sliderTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self  selector:@selector(updateSlider) userInfo:nil repeats:YES];
    self.playSlider.maximumValue = [self durationInSeconds];
    [self.playSlider addTarget:self action:@selector(sliding:) forControlEvents:UIControlEventTouchUpInside];
    self.playSlider.minimumValue = 0.0;
    self.playSlider.continuous = YES;
}

- (void)updateSlider {
    
    self.playSlider.maximumValue = [self durationInSeconds];
    self.playSlider.value = [self currentTimeInSeconds];
}

- (Float64)durationInSeconds {
    AVPlayerItem * playerItemHttp = self.mediaplayer.managerUtility.getAVPlayerItem;
   static Float64 dur = 0.f;
    if (playerItemHttp.status == AVPlayerItemStatusReadyToPlay){
        //NSLog(@"ready for play");
     dur = CMTimeGetSeconds(playerItemHttp.duration);
       
    }
    //NSLog(@"duratuon %0.2f", dur);
    if ( dur != 0 )
    {
        [self.activityIndicator stopAnimating];
    }
    return dur;
}


- (Float64)currentTimeInSeconds {
    Float64 dur = CMTimeGetSeconds([self.mediaplayer.managerUtility getCurrentTime]);
    return dur;
}

@end
